[tool.poetry]
name = "olympus-api"
version = "0.1.0"
description = "FastAPI backend for Olympus MVP"
authors = ["Olympus Team <team@olympus.dev>"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.7"

# Supabase
supabase = "^2.7.4"

# Database
sqlalchemy = {extras = ["asyncio"], version = "^2.0.30"}
asyncpg = "^0.30.0"
alembic = "^1.13.1"

# Auth & Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-decouple = "^3.8"

# GraphQL
strawberry-graphql = {extras = ["fastapi"], version = "^0.240.0"}

# Redis for session management
redis = "^4.6.0"

# Utilities
pydantic = ">=2.0,<2.10"
pydantic-settings = "^2.2.1"
python-dotenv = "^1.0.0"
httpx = "^0.27.0"
email-validator = "^2.3.0"
sse-starlette = "^2.0.0"  # Server-Sent Events for real-time updates

# Document Processing
pymupdf = "^1.23.0"  # PDF extraction
python-docx = "^1.1.0"  # DOCX extraction
tiktoken = "^0.7.0"  # Token counting for OpenAI models
nltk = "^3.8.0"  # Sentence splitting and NLP
openai = "^1.3.0"  # OpenAI API client for embeddings
tenacity = "^8.2.0"  # Retry logic for API calls
pgvector = "^0.2.0"  # PostgreSQL vector extension support

# LangChain & AI Agent
langchain = "^0.3.0"
langchain-openai = "^0.2.0"
langgraph = "^0.2.0"
langsmith = "^0.1.0"  # Observability and tracing

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
ruff = "^0.4.4"
mypy = "^1.5.0"
pre-commit = "^3.4.0"
aiosqlite = "^0.19.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = [
    "__pycache__",
    ".venv",
    "alembic/versions",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate (commented-out code)
    "PD",    # pandas-vet
    "PL",    # pylint
    "TRY",   # tryceratops
    "NPY",   # numpy-specific rules
    "RUF",   # ruff-specific rules
    "ASYNC", # flake8-async
    "S",     # flake8-bandit (security)
]

# Ignore specific rules that may be too strict or not applicable
ignore = [
    "E501",    # Line too long (handled by formatter)
    "TRY003",  # Avoid specifying long messages outside exception class
    "S101",    # Use of assert (needed for pytest)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Single line implicit string concatenation (conflicts with formatter)
    "B008",    # Do not perform function call in argument defaults (FastAPI pattern)
    "TRY300",  # Consider moving statement to else block (overly prescriptive)
    "TRY301",  # Abstract raise to inner function (overly prescriptive)
    "TRY401",  # Redundant exception object in logging.exception (acceptable for clarity)
    "RET503",  # Missing explicit return (GraphQL resolvers can return None implicitly)
    "RET504",  # Unnecessary assignment before return (sometimes aids readability)
    "B904",    # Within except clause raise with from (not always necessary)
    "S110",    # try-except-pass (sometimes acceptable for optional features)
    "EM102",   # F-string in exception (acceptable for dynamic messages)
    "G004",    # F-string in logging (acceptable for readability)
    "RUF012",  # Mutable class attributes (sometimes intentional for middleware)
    "RUF010",  # Use explicit conversion flag (str(e) is clear and widely used)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Test files can use assertions, magic values, and test tokens
"tests/**/*.py" = [
    "S101",    # Use of assert
    "S105",    # Possible hardcoded password (test fixtures)
    "S106",    # Possible hardcoded password in argument
    "S607",    # Starting process with partial path
    "S603",    # Subprocess call
    "PLR2004", # Magic values
    "ARG001",  # Unused function arguments
    "ARG002",  # Unused method arguments
    "B017",    # pytest.raises(Exception) is fine in tests
    "PT011",   # pytest.raises specificity
    "EM101",   # Exception messages in tests
    "PT023",   # pytest.mark.asyncio() vs @pytest.mark.asyncio
    "ERA001",  # Commented-out code in tests
    "RUF013",  # Implicit Optional in tests
]
# Standalone test files in api root
"test_models_simple.py" = [
    "PT023",   # pytest.mark.asyncio() vs @pytest.mark.asyncio
    "ERA001",  # Commented-out code
    "RUF013",  # Implicit Optional
    "I001",    # Import sorting
]
# Migration files can have print statements and complex queries
"alembic/versions/*.py" = ["T201", "E501"]
# Alembic env file can have commented-out code
"alembic/env.py" = ["ERA001"]
# Config files can have complex settings and bind to all interfaces
"app/config.py" = ["S105", "S106", "S104", "EM101"]
# Auth files deal with tokens and may have security warnings
"app/auth/*.py" = ["S105", "S106", "B904", "EM101", "EM102"]
# Auth service uses global for lazy initialization
"app/auth/service.py" = ["PLW0603"]
# Route files may have unused arguments for future implementation
"app/routes/*.py" = ["ARG001"]
# Document processor has complex pipeline orchestration
"app/services/document_processor.py" = ["PLR0915"]  # Too many statements (pipeline orchestration)
# Agent files may have TODOs for future vector search integration
"app/agents/*.py" = ["ERA001"]  # Commented-out code (intentional TODOs)
# Scripts can have print statements and subprocess calls for utility purposes
"scripts/**/*.py" = [
    "T201",    # Print statements
    "S603",    # Subprocess calls
    "S607",    # Partial executable paths
    "PLW1510", # subprocess.run without check
    "RUF005",  # List concatenation
    "RUF013",  # Implicit Optional
    "I001",    # Import sorting (scripts may have specific import patterns)
    "Q000",    # Quote style
    "W291",    # Trailing whitespace
]
# Utility files and standalone scripts
"*.py" = [
    "T201",    # Print statements in standalone scripts
    "S603",    # Subprocess calls
    "S607",    # Partial executable paths
    "PLW1510", # subprocess.run without check
    "PLR0912", # Too many branches (utility scripts)
    "I001",    # Import sorting
]
# Supabase client can have specific patterns and uses global for lazy initialization
"supabase_client.py" = ["EM101", "UP007", "PLW0603"]  # Global statement for lazy initialization
# Database session module uses global for lazy initialization pattern
"app/db/session.py" = ["PLW0603"]  # Global statement for lazy initialization

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
combine-as-imports = true

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning:importlib._bootstrap",  # PyMuPDF/SwigPy internal warnings
]